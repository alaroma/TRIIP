package com.example.var8;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.location.Address;
import android.location.Geocoder;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.MultiAutoCompleteTextView;
import android.widget.TextView;
import android.widget.Toast;

import com.openalpr.jni.Alpr;
import com.openalpr.jni.AlprException;
import com.openalpr.jni.AlprPlate;
import com.openalpr.jni.AlprPlateResult;
import com.openalpr.jni.AlprResults;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;


public class MainActivity extends AppCompatActivity {
    private static final int STORAGE = 1;
    private static final int STORAGE_READ= 2;
    private static final int CAMERA = 3;
    private String ANDROID_DATA_DIR;
    private ImageView imageView;
    private TextView textView;
    // private EditText num_rasp;
    private static File destination;
    // ProgressDialog prdi;
    private ImageView mapButton;
    private int count = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setupActionBar();
        setContentView(R.layout.activity_main);
        textView = findViewById(R.id.textView);
        Button button = findViewById(R.id.button);
        Button cam = findViewById(R.id.cam);
        ANDROID_DATA_DIR = this.getApplicationInfo().dataDir;

        button.setOnClickListener(new View.OnClickListener() {

            public void onClick(View view) {
                checkPermission(STORAGE);
                //  takePicture();
//                Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
//                photoPickerIntent.setType("image/*");
//                startActivityForResult(photoPickerIntent, 1);
            }
        });


        cam.setOnClickListener(new View.OnClickListener() {

            public void onClick(View view) {
                checkPermission(CAMERA);
                //  takePicture();
//                Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
//                photoPickerIntent.setType("image/*");
//                startActivityForResult(photoPickerIntent, 1);
            }
        });
    }

    public String dateToString(Date date, String format) {
        SimpleDateFormat df = new SimpleDateFormat(format, Locale.getDefault());

        return df.format(date);
    }

    private void checkPermission(int code) {
        List<String> permissions = new ArrayList<>();
//        permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);
//        permissions.add(Manifest.permission.CAMERA);
//        permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE);
        String[] params = permissions.toArray(new String[permissions.size()]);
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED) {
            permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);
            ActivityCompat.requestPermissions(this, params, STORAGE);
        }
        if ((ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED)) {
            permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE);
            ActivityCompat.requestPermissions(this, params , STORAGE_READ);
        }
        if ((ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_DENIED)) {
            permissions.add(Manifest.permission.CAMERA);
            ActivityCompat.requestPermissions(this, params , CAMERA);
        } else { // We already have permissions, so handle as normal
                takePicture(code);

        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        Map<String, Integer> perms = new HashMap<>();

        switch (requestCode) {

            case STORAGE: {
                perms.put(Manifest.permission.WRITE_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);
                //  perms.put(Manifest.permission.READ_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);
                //perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);
            }
            case STORAGE_READ: {
                perms.put(Manifest.permission.READ_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);
            }
            case CAMERA: {
                perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);
            }
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                //     for (int i = 0; i < permissions.length; i++)
                //       perms.put(permissions[i], grantResults[i]);
                // Check for WRITE_EXTERNAL_STORAGE
                Boolean storage = perms.get(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
                Boolean storage_read = perms.get(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
                Boolean camera = perms.get(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED;

                if (storage && storage_read && camera) {
                    // permission was granted, yay!
                    takePicture(requestCode);
                } else {
                    // Permission Denied
                    Toast.makeText(this, "Permission denied", Toast.LENGTH_LONG).show();
                }
            }

            default:
                break;
        }
//    }
            }

        public void takePicture(int code) {
            // Use a folder to store all results
            if (code == CAMERA) {
                File folder = new File(Environment.getExternalStorageDirectory() + "/OpenALPR/");
                if (!folder.exists()) {
                    folder.mkdir();
                }

                // Generate the path for the next photo
                String name = dateToString(new Date(), "yyyy-MM-dd-hh-mm-ss");
                destination = new File(folder, name + ".jpg");

                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(destination));
                startActivityForResult(cameraIntent, 0);
            }
            if (code == STORAGE) {
                Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
                photoPickerIntent.setType("image/*");
                startActivityForResult(photoPickerIntent, 1);
            }
        }

        @RequiresApi(api = Build.VERSION_CODES.N)
        @Override
        protected void onActivityResult(int requestCode, int resultCode, Intent imageReturnedIntent) {
            super.onActivityResult(requestCode, resultCode, imageReturnedIntent);

            if (resultCode == RESULT_OK) {

                switch (requestCode) {
                    case 0:

                        Raspoz(0, null, null);
                      //  showExifcam();
                        break;
                    case 1:
                        Uri selectedImage2 = imageReturnedIntent.getData();
                        String Path = getRealPathFromURI(selectedImage2);
                        Raspoz(1, selectedImage2, Path);
                        break;
                }
            }
        }
        public String getRealPathFromURI(Uri uri) {
            if (uri == null) return null;
            String[] projection = {MediaStore.Images.Media.DATA};
            Cursor cursor = getContentResolver().query(uri, projection, null, null, null);
            if (cursor != null) {
                int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                cursor.moveToFirst();
                String result = cursor.getString(column_index);
                cursor.close();
                return result;

            }

            return uri.getPath();
        }
        private void setupActionBar() {
            ActionBar actionBar = getSupportActionBar();
            if (actionBar != null) {
                // Show the Up button in the action bar.
                actionBar.setDisplayHomeAsUpEnabled(true);
            }
        }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                this.finish();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }
        @SuppressLint("StaticFieldLeak")
        void Raspoz(final int i, Uri selectedImage2, final String path) {
            textView.setText("");
            //  final String path_dir = path.replace("JPG", "jpg");
            //   final String path_dir = path;
            final ProgressDialog progress = ProgressDialog.show(this, "Подождите", "Идет распознавание...", true);
            final String openAlprConfFile = ANDROID_DATA_DIR + File.separatorChar + "runtime_data" + File.separatorChar + "config" + File.separatorChar + "openalpr.conf";
            String str = ANDROID_DATA_DIR + File.separatorChar + "runtime_data";
            final Alpr alpr = new Alpr(MainActivity.this, this.getApplicationInfo().dataDir, "eu", openAlprConfFile, str);
            boolean t3 = alpr.isLoaded();
            alpr.setTopN(10);
            // alpr.setDefaultRegion("");
            alpr.setDetectRegion(false);
            // progress.show();
            //  final String openAlprConfFile = ANDROID_DATA_DIR + File.separatorChar + "runtime_data" + File.separatorChar + "openalpr.conf";

            //  if(i == 0) Picasso.with(CreateLabel.this).load(destination).into(imageView);
            //if (i==1 && selectedImage2!=null)  {
            //  imageView.setImageURI(selectedImage2);
            //}

            new AsyncTask<Void, Void, AlprResults>() {

                @Override
                protected void onPreExecute() {
                    super.onPreExecute();
                    progress.show();
                }

                @Override
                protected AlprResults doInBackground(Void... params) {
                    AlprResults result = null;
                    // String t = destination.getAbsolutePath();
                    //
                    try {
                        result = alpr.recognize(path);
                    } catch (AlprException e) {
                        e.printStackTrace();
                    }

                    return result;
                }

                @Override
                protected void onPostExecute(AlprResults result) {
                    progress.dismiss();
                    if (result == null || result.getPlates() == null || result.getPlates().size() == 0) {
                        Toast.makeText(MainActivity.this, "It was not possible to detect the licence plate.", Toast.LENGTH_LONG).show();
                        textView.setText("It was not possible to detect the licence plate.");
                    } else {
                        //result.getPlates().get(0).getBestPlate();

                        textView.setText(result.getPlates().get(0).getBestPlate().getCharacters());
                    }
                }

            }.execute();

        }}

